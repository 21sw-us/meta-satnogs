diff --git a/CMakeLists.txt b/CMakeLists.txt
index 71915d5eb..4d1eccb22 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -197,6 +197,7 @@ include(CMakeOverloads)
 # Compiler specific setup
 ########################################################################
 include(GrMiscUtils) #compiler flag check
+add_definitions(-DBOOST_BIND_GLOBAL_PLACEHOLDERS)
 
 include(TestBigEndian)
 TEST_BIG_ENDIAN(GR_IS_BIG_ENDIAN)
@@ -213,6 +214,7 @@ if(CMAKE_CXX_COMPILER_ID MATCHES "Clang" OR
     GR_ADD_CXX_COMPILER_FLAG_IF_AVAILABLE(-Wsign-compare HAVE_WARN_SIGN_COMPARE)
     GR_ADD_CXX_COMPILER_FLAG_IF_AVAILABLE(-Wall HAVE_WARN_ALL)
     GR_ADD_CXX_COMPILER_FLAG_IF_AVAILABLE(-Wno-uninitialized HAVE_WARN_NO_UNINITIALIZED)
+	GR_ADD_CXX_COMPILER_FLAG_IF_AVAILABLE(-Wno-psabi HAVE_WARN_NO_PSABI)
 endif(CMAKE_CXX_COMPILER_ID MATCHES "Clang" OR
       CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
 
diff --git a/cmake/Modules/GnuradioConfig.cmake.in b/cmake/Modules/GnuradioConfig.cmake.in
index eca83d36f..7fd4971a2 100644
--- a/cmake/Modules/GnuradioConfig.cmake.in
+++ b/cmake/Modules/GnuradioConfig.cmake.in
@@ -46,7 +46,7 @@ find_dependency(Boost "@Boost_MAJOR_VERSION@.@Boost_MINOR_VERSION@.@Boost_SUBMIN
 find_dependency(Volk)
 set(ENABLE_PYTHON @ENABLE_PYTHON@ CACHE BOOL "Enable Python & SWIG")
 if(${ENABLE_PYTHON})
-  set(PYTHON_EXECUTABLE @PYTHON_EXECUTABLE@)
+  set(PYTHON_EXECUTABLE "/usr/bin/python3")
   include(GrPython)
 endif()
 
diff --git a/cmake/Modules/GrPython.cmake b/cmake/Modules/GrPython.cmake
index fd9b7583a..98d51c3f6 100644
--- a/cmake/Modules/GrPython.cmake
+++ b/cmake/Modules/GrPython.cmake
@@ -2,20 +2,8 @@
 #
 # This file is part of GNU Radio
 #
-# GNU Radio is free software; you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation; either version 3, or (at your option)
-# any later version.
+# SPDX-License-Identifier: GPL-3.0-or-later
 #
-# GNU Radio is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with GNU Radio; see the file COPYING.  If not, write to
-# the Free Software Foundation, Inc., 51 Franklin Street,
-# Boston, MA 02110-1301, USA.
 
 if(DEFINED __INCLUDED_GR_PYTHON_CMAKE)
     return()
@@ -33,18 +21,13 @@ if (PYTHON_EXECUTABLE)
     find_package(PythonInterp ${GR_PYTHON_MIN_VERSION} REQUIRED)
 else (PYTHON_EXECUTABLE)
     message(STATUS "PYTHON_EXECUTABLE not set - using default python3")
-    message(STATUS "Use -DPYTHON_EXECUTABLE=/path/to/python2 to build for python2.")
-    find_package(PythonInterp ${GR_PYTHON3_MIN_VERSION} REQUIRED)
+    find_package(PythonInterp ${GR_PYTHON_MIN_VERSION} REQUIRED)
 endif (PYTHON_EXECUTABLE)
 
-if (${PYTHON_VERSION_MAJOR} VERSION_EQUAL 3)
-    set(PYTHON3 TRUE)
-endif ()
-
 find_package(PythonLibs ${PYTHON_VERSION_MAJOR}.${PYTHON_VERSION_MINOR} EXACT)
 
 if (CMAKE_CROSSCOMPILING)
-    set(QA_PYTHON_EXECUTABLE "/usr/bin/python")
+    set(QA_PYTHON_EXECUTABLE "/usr/bin/python3")
 else (CMAKE_CROSSCOMPILING)
     set(QA_PYTHON_EXECUTABLE ${PYTHON_EXECUTABLE})
 endif(CMAKE_CROSSCOMPILING)
@@ -68,6 +51,35 @@ else()
       )
 endif()
 
+# separate target when linking to make an extension module, which should not
+# link explicitly to the python library on Unix-like platforms
+add_library(Python::Module INTERFACE IMPORTED)
+if(WIN32)
+    # identical to Python::Python, cannot be an alias because Python::Python is imported
+    # Need to handle special cases where both debug and release
+    # libraries are available (in form of debug;A;optimized;B) in PYTHON_LIBRARIES
+    if(PYTHON_LIBRARY_DEBUG AND PYTHON_LIBRARY_RELEASE)
+        set_target_properties(Python::Module PROPERTIES
+          INTERFACE_INCLUDE_DIRECTORIES "${PYTHON_INCLUDE_DIRS}"
+          INTERFACE_LINK_LIBRARIES "$<$<NOT:$<CONFIG:Debug>>:${PYTHON_LIBRARY_RELEASE}>;$<$<CONFIG:Debug>:${PYTHON_LIBRARY_DEBUG}>"
+        )
+    else()
+        set_target_properties(Python::Module PROPERTIES
+          INTERFACE_INCLUDE_DIRECTORIES "${PYTHON_INCLUDE_DIRS}"
+          INTERFACE_LINK_LIBRARIES "${PYTHON_LIBRARIES}"
+        )
+    endif()
+else()
+    set_target_properties(Python::Module PROPERTIES
+        INTERFACE_INCLUDE_DIRECTORIES "${PYTHON_INCLUDE_DIRS}"
+    )
+    if(APPLE)
+        set_target_properties(Python::Module PROPERTIES
+            INTERFACE_LINK_OPTIONS "LINKER:-undefined,dynamic_lookup"
+        )
+    endif(APPLE)
+endif(WIN32)
+
 
 ########################################################################
 # Check for the existence of a python module:
@@ -95,6 +107,7 @@ macro(GR_PYTHON_CHECK_MODULE desc mod cmd have)
     GR_PYTHON_CHECK_MODULE_RAW(
         "${desc}" "
 #########################################
+from distutils.version import LooseVersion
 try:
     import ${mod}
     assert ${cmd}
@@ -308,7 +321,7 @@ function(GR_PYTHON_INSTALL)
             add_custom_command(
                 OUTPUT ${pyexefile} DEPENDS ${pyfile}
                 COMMAND ${PYTHON_EXECUTABLE} -c
-                "import re; R=re.compile('^\#!.*$\\n',flags=re.MULTILINE); open('${pyexefile}','w').write('\#!${pyexe_native}\\n'+R.sub('',open('${pyfile}','r').read()))"
+                "import re; R=re.compile('^\#!.*$\\n',flags=re.MULTILINE); open(r'${pyexefile}','w').write(r'\#!${pyexe_native}'+'\\n'+R.sub('',open(r'${pyfile}','r').read()))"
                 COMMENT "Shebangin ${pyfile_name}"
                 VERBATIM
             )
